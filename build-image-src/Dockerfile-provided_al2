ARG IMAGE_ARCH
FROM public.ecr.aws/sam/emulation-provided.al2:latest-$IMAGE_ARCH

# To learn more context around use of `amazonlinux:2` image please read comment in java11/build/Dockerfile
FROM public.ecr.aws/amazonlinux/amazonlinux:2
COPY --from=0 / /rootfs

# Installing by yum at copied location
RUN yum groupinstall -y development --installroot=/rootfs && \
  yum install -d1 --installroot=/rootfs -y \
  yum \
  tar \
  gzip \
  unzip \
  python3 \
  jq \
  grep \
  curl \
  make \
  rsync \
  binutils \
  gcc-c++ \
  procps \
  libgmp3-dev \
  zlib1g-dev \
  liblzma-dev \
  libxslt-devel \
  libmpc-devel \
  python3-devel \
  && yum clean all

# Copying root from AL2 to runtimes image
FROM public.ecr.aws/sam/emulation-provided.al2:latest-$IMAGE_ARCH
COPY --from=1 /rootfs /

# Install AWS CLI
ARG AWS_CLI_ARCH
RUN curl "https://awscli.amazonaws.com/awscli-exe-linux-$AWS_CLI_ARCH.zip" -o "awscliv2.zip" && unzip awscliv2.zip && ./aws/install && rm awscliv2.zip && rm -rf ./aws

# Install Rust toolchain
ARG RUST_VERSION=1.63.0
ENV RUST_VERSION=${RUST_VERSION}
ENV RUST_ARCH=${AWS_CLI_ARCH}-unknown-linux-gnu
ENV RUSTUP_HOME=/usr/local/rustup
ENV CARGO_HOME=/usr/local/cargo
ENV PATH=$PATH:/usr/local/cargo/bin
RUN curl -sSOL "https://static.rust-lang.org/rustup/archive/1.25.1/${RUST_ARCH}/rustup-init" && \
  chmod +x rustup-init && \
  ./rustup-init -y --no-modify-path --profile minimal --default-toolchain ${RUST_VERSION} --default-host ${RUST_ARCH} && \
  rm rustup-init && \
  chmod -R a+w ${RUSTUP_HOME} ${CARGO_HOME}
RUN rustup target install x86_64-unknown-linux-gnu; rustup target install aarch64-unknown-linux-gnu

# Install Cargo Lambda and depedendencies
ARG CARGO_LAMBDA_VERSION=0.11.1
RUN pip3 install cargo-lambda==${CARGO_LAMBDA_VERSION}

# Install SAM CLI in a dedicated Python virtualenv
ARG SAM_CLI_VERSION
RUN curl -L "https://github.com/awslabs/aws-sam-cli/archive/v$SAM_CLI_VERSION.zip" -o "samcli.zip" && \
  unzip samcli.zip && python3 -m venv /usr/local/opt/sam-cli && \
  /usr/local/opt/sam-cli/bin/pip3 --no-cache-dir install -r ./aws-sam-cli-$SAM_CLI_VERSION/requirements/base.txt && \
  /usr/local/opt/sam-cli/bin/pip3 --no-cache-dir install ./aws-sam-cli-$SAM_CLI_VERSION && \
  rm samcli.zip && rm -rf aws-sam-cli-$SAM_CLI_VERSION

ENV PATH=$PATH:/usr/local/opt/sam-cli/bin

ENV LANG=en_US.UTF-8

# Wheel is required by SAM CLI to build libraries like cryptography. It needs to be installed in the system
# Python for it to be picked up during `sam build`
RUN pip3 install wheel

COPY ATTRIBUTION.txt /
